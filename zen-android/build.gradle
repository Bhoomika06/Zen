buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'org.robolectric:robolectric-gradle-plugin:1.0.0'
        classpath 'io.fabric.tools:gradle:1.18.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

dependencies {
    compile('com.crashlytics.sdk.android:crashlytics:2.2.2@aar') {
        transitive = true;
    }
}


android {
    project.archivesBaseName = "$rootProject.name";

    compileSdkVersion rootProject.ext.COMPILE_SDK
    buildToolsVersion rootProject.ext.BUILD_TOOLS

    defaultConfig {
        applicationId 'zenproject.meditation.android'
        testApplicationId 'zenproject.meditation.android.tests'

        minSdkVersion rootProject.ext.MIN_SDK
        targetSdkVersion rootProject.ext.TARGET_SDK
        versionCode rootProject.ext.VERSION_CODE
        versionName rootProject.ext.VERSION_NAME

        proguardFile getDefaultProguardFile('proguard-android.txt')
        proguardFile 'proguard-rules.pro'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        release {
            storePassword "mypassword"
            keyAlias "KeyAlias"
            keyPassword "mypassword"
        }
    }


    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
            def crashLyticsApiKey = ""
            manifestPlaceholders = [crashLyticsApiKey: crashLyticsApiKey]
        }
        release {
            jniDebuggable false
            shrinkResources true
            minifyEnabled true
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
            def crashLyticsApiKey = crashLyticsApiKey // this value goes into ~/.gradle/gradle.properties
            manifestPlaceholders = [crashLyticsApiKey: crashLyticsApiKey]
        }
    }

    dependencies {
        compile project(':rainbow-lib')
        compile project(':circularmenu-library')
        compile 'com.nineoldandroids:library:2.4.0'
        compile 'com.android.support:support-annotations:20.0.0'
        compile 'com.android.support:appcompat-v7:22.0.0'
        compile 'com.afollestad:material-dialogs:0.6.3.3'
        compile 'de.hdodenhof:circleimageview:1.2.2'
        compile('com.novoda:notils:2.2.11') {
            exclude module: 'support-v4'
        }
    }
}

ext {
    REPORT_LOCATIONS = ""
}

def buildTimeFormatted() {
    Calendar instance = Calendar.getInstance()
    instance.setTimeInMillis(System.currentTimeMillis())
    instance.getTime()
}


apply from: "$project.rootDir/analysis-tools/android-robolectric.gradle"
apply from: "$project.rootDir/analysis-tools/android-jacoco.gradle"
apply from: "$project.rootDir/analysis-tools/android-checkstyle.gradle"
apply from: "$project.rootDir/analysis-tools/android-pmd.gradle"
apply from: "$project.rootDir/analysis-tools/android-findbugs.gradle"

task zen dependsOn("build") {

    println "Finished at: " + new Date();

    println "\n"
    println REPORT_LOCATIONS
}

zen.dependsOn("check")


